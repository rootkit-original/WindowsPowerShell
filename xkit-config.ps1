# XKit Configuration
# Auto-generated configuration file with absolute paths
# DO NOT EDIT MANUALLY - Generated by XKit setup

# Core paths
$global:XKIT_ROOT = "C:\Users\Usuario\Documents\WindowsPowerShell"
$global:XKIT_SCRIPTS = "$global:XKIT_ROOT\Scripts"
$global:XKIT_PYTHON_MAIN = "$global:XKIT_SCRIPTS\xkit_main.py"
$global:XKIT_OH_MY_XKIT = "$global:XKIT_ROOT\oh-my-xkit"
$global:XKIT_PLUGINS = "$global:XKIT_OH_MY_XKIT\plugins"
$global:XKIT_THEMES = "$global:XKIT_OH_MY_XKIT\themes"

# Python executable path (auto-detected)
$global:XKIT_PYTHON_EXE = "python"

# Version info
$global:XKIT_VERSION = "2.1.0"
$global:XKIT_CONFIG_VERSION = "1.0"

# Environment variables (if needed)
$global:XKIT_ENV_VARS = @{
    "GEMINI_API_KEY" = "AIzaSyCvzBo-iK-KBdwedZYSHyoHcMzsYqEArC4"
    "TELEGRAM_TOKEN" = "8477588651:AAGaQLuk7hsfW5UWiNEnpGWK2Z6rRLg9A-s"
    "ADMIN_ID" = "7335391186"
}

# Plugin configuration
$global:XKIT_PLUGIN_LIST = @(
    "git", 
    "docker", 
    "ai-assistant", 
    "telegram-notifier", 
    "error-handler-simple", 
    "command-wrapper"
)

# Theme configuration
$global:XKIT_THEME = "powerlevel10k-xkit"

# Helper function to validate configuration
function Test-XKitConfiguration {
    $valid = $true
    
    Write-Host "[CONFIG] Validating XKit configuration..." -ForegroundColor Yellow
    
    # Check core paths
    if (-not (Test-Path $global:XKIT_ROOT)) {
        Write-Host "[ERROR] XKit root path not found: $global:XKIT_ROOT" -ForegroundColor Red
        $valid = $false
    }
    
    if (-not (Test-Path $global:XKIT_SCRIPTS)) {
        Write-Host "[ERROR] XKit scripts path not found: $global:XKIT_SCRIPTS" -ForegroundColor Red
        $valid = $false
    }
    
    if (-not (Test-Path $global:XKIT_PYTHON_MAIN)) {
        Write-Host "[ERROR] XKit Python main not found: $global:XKIT_PYTHON_MAIN" -ForegroundColor Red
        $valid = $false
    }
    
    # Check Python
    try {
        $pythonVersion = & $global:XKIT_PYTHON_EXE --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "[OK] Python found: $pythonVersion" -ForegroundColor Green
        } else {
            Write-Host "[ERROR] Python not available" -ForegroundColor Red
            $valid = $false
        }
    } catch {
        Write-Host "[ERROR] Python executable not found: $global:XKIT_PYTHON_EXE" -ForegroundColor Red
        $valid = $false
    }
    
    if ($valid) {
        Write-Host "[CONFIG] XKit configuration is valid" -ForegroundColor Green
    } else {
        Write-Host "[CONFIG] XKit configuration has errors" -ForegroundColor Red
    }
    
    return $valid
}

# Helper function to call Python with proper paths
function Invoke-XKitPython {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Action,
        
        [Parameter(ValueFromRemainingArguments)]
        [string[]]$Arguments = @()
    )
    
    # Ensure we have valid configuration
    if (-not (Test-XKitConfiguration)) {
        Write-Host "[ERROR] Cannot execute XKit Python - configuration invalid" -ForegroundColor Red
        return $false
    }
    
    try {
        # Build command with absolute paths
        $cmd = @($global:XKIT_PYTHON_EXE, $global:XKIT_PYTHON_MAIN, $Action) + $Arguments
        
        # Set environment variables
        foreach ($envVar in $global:XKIT_ENV_VARS.GetEnumerator()) {
            Set-Item -Path "env:$($envVar.Key)" -Value $envVar.Value -Force
        }
        
        # Execute with proper error handling
        $result = & $cmd[0] $cmd[1..($cmd.Length-1)]
        
        if ($LASTEXITCODE -and $LASTEXITCODE -ne 0) {
            Write-Host "[ERROR] XKit Python execution failed with exit code: $LASTEXITCODE" -ForegroundColor Red
            return $false
        }
        
        return $true
    }
    catch {
        Write-Host "[ERROR] Failed to execute XKit Python: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

Write-Host "[CONFIG] XKit configuration loaded (v$global:XKIT_CONFIG_VERSION)" -ForegroundColor Green