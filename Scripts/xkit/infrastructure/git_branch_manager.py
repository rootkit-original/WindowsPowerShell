"""
Infrastructure - Git Branch Manager Implementation
"""
import subprocess
import os
from typing import Optional
from pathlib import Path
from datetime import datetime

from ..domain import XKitError, IGitBranchManager


class GitBranchManager(IGitBranchManager):
    """Implementation of Git branch operations for error handling"""
    
    def __init__(self, working_directory: Path = None):
        self.working_directory = working_directory or Path.cwd()
        self.previous_branch = None
        
    def create_error_branch(self, error: XKitError) -> str:
        """Create a new branch for error resolution"""
        timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
        branch_name = f"xkit-error-{timestamp}"
        
        try:
            # Store current branch
            result = subprocess.run(
                ["git", "branch", "--show-current"],
                capture_output=True,
                text=True,
                cwd=self.working_directory,
                check=True
            )
            self.previous_branch = result.stdout.strip()
            
            # Create and switch to new branch
            subprocess.run(
                ["git", "checkout", "-b", branch_name],
                capture_output=True,
                text=True,
                cwd=self.working_directory,
                check=True
            )
            
            return branch_name
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Failed to create error branch: {e.stderr}")
    
    def commit_error_report(self, error: XKitError, branch_name: str) -> bool:
        """Commit error report to branch"""
        try:
            # Create error report content
            error_report = self._generate_error_report(error, branch_name)
            
            # Write to file
            error_file_path = self.working_directory / f"XKIT_ERROR_{error.id}.md"
            with open(error_file_path, 'w', encoding='utf-8') as f:
                f.write(error_report)
            
            # Add and commit
            subprocess.run(
                ["git", "add", str(error_file_path)],
                capture_output=True,
                text=True,
                cwd=self.working_directory,
                check=True
            )
            
            commit_message = f"ðŸš¨ XKit Error #{error.id}: {error.message}"
            subprocess.run(
                ["git", "commit", "-m", commit_message],
                capture_output=True,
                text=True,
                cwd=self.working_directory,
                check=True
            )
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"Warning: Failed to commit error report: {e.stderr}")
            return False
        except Exception as e:
            print(f"Warning: Error creating report file: {e}")
            return False
    
    def switch_to_previous_branch(self) -> bool:
        """Switch back to previous branch"""
        if not self.previous_branch:
            return False
            
        try:
            subprocess.run(
                ["git", "checkout", self.previous_branch],
                capture_output=True,
                text=True,
                cwd=self.working_directory,
                check=True
            )
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"Warning: Failed to switch to previous branch: {e.stderr}")
            return False
    
    def _generate_error_report(self, error: XKitError, branch_name: str) -> str:
        """Generate detailed error report content"""
        return f"""# XKit Error Report

## Error Information
- **Error ID:** #{error.id}
- **Timestamp:** {error.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
- **Branch:** {branch_name}
- **Type:** {error.error_type.value}
- **Severity:** {error.severity.value}

## Error Details
**Message:** {error.message}
**Command:** {error.command or 'N/A'}
**Context:** {error.context or 'N/A'}

## System Information
- **Working Directory:** {self.working_directory}
- **Previous Branch:** {self.previous_branch or 'Unknown'}
- **PowerShell Profile:** {os.environ.get('PROFILE', 'Not found')}

## XKit State
- **Framework Version:** 2.1.0
- **Error Count:** {error.id}

## Resolution Checklist
- [ ] Error reproduced
- [ ] Root cause identified  
- [ ] Fix implemented
- [ ] Testing completed
- [ ] Documentation updated

## XPilot Analysis
*Analysis will be added by @xpilot agent*

## Resolution Notes
*Add your resolution steps here*

---
*Generated by XKit Error Handler v2.1.0*  
*Local @xpilot agent - Enhanced PowerShell Framework*
"""