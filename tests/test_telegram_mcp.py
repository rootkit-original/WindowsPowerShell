#!/usr/bin/env python3
"""
Script de teste para o MCP Server do Telegram
Testa todas as funcionalidades do servidor MCP integrado com Telegram Bot
"""
import sys
import asyncio
import logging
from pathlib import Path
from typing import Dict, Any

# Add XKit path
sys.path.insert(0, str(Path(__file__).parent.parent / "Scripts"))

from xkit.mcp.client import XKitMCPClient
from xkit.infrastructure.config import XKitConfigService

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramMCPTester:
    """Tester para o MCP Server do Telegram"""
    
    def __init__(self):
        self.mcp_client = XKitMCPClient()
        self.config = XKitConfigService()
        self.server_name = "telegram-bot"
    
    async def run_all_tests(self):
        """Executa todos os testes do MCP Server"""
        print("üöÄ Iniciando testes do MCP Telegram Server...")
        print("=" * 60)
        
        try:
            # Test 1: Verificar se servidor est√° dispon√≠vel
            await self.test_server_availability()
            
            # Test 2: Listar ferramentas dispon√≠veis
            await self.test_list_tools()
            
            # Test 3: Testar informa√ß√µes do bot
            await self.test_bot_info()
            
            # Test 4: Testar envio de mensagem
            await self.test_send_message()
            
            # Test 5: Testar relat√≥rio de projeto
            await self.test_project_report()
            
            # Test 6: Testar status do sistema
            await self.test_system_status()
            
            # Test 7: Testar status Git
            await self.test_git_status()
            
            # Test 8: Testar comando do Telegram
            await self.test_telegram_command()
            
            print("\\n" + "=" * 60)
            print("‚úÖ Todos os testes conclu√≠dos!")
            
        except Exception as e:
            print(f"\\n‚ùå Erro durante os testes: {e}")
            logger.exception("Erro nos testes")
    
    async def test_server_availability(self):
        """Testa se o servidor MCP est√° dispon√≠vel"""
        print("\\nüì° Teste 1: Disponibilidade do Servidor")
        print("-" * 40)
        
        try:
            servers = await self.mcp_client.list_servers()
            
            if self.server_name in servers:
                print(f"‚úÖ Servidor '{self.server_name}' encontrado")
                server_info = servers[self.server_name]
                print(f"   Tipo: {server_info.get('type', 'unknown')}")
                print(f"   Ativo: {server_info.get('enabled', False)}")
            else:
                print(f"‚ùå Servidor '{self.server_name}' n√£o encontrado")
                print(f"   Servidores dispon√≠veis: {list(servers.keys())}")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar disponibilidade: {e}")
    
    async def test_list_tools(self):
        """Testa listagem de ferramentas"""
        print("\\nüõ†Ô∏è Teste 2: Listagem de Ferramentas")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "list_tools", {}
            )
            
            if result.get("success"):
                tools = result.get("result", [])
                print(f"‚úÖ {len(tools)} ferramentas encontradas:")
                
                for tool in tools:
                    if isinstance(tool, dict):
                        name = tool.get("name", "Unknown")
                        description = tool.get("description", "No description")
                        print(f"   ‚Ä¢ {name}: {description}")
                    else:
                        print(f"   ‚Ä¢ {tool}")
            else:
                print(f"‚ùå Erro ao listar ferramentas: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro na listagem: {e}")
    
    async def test_bot_info(self):
        """Testa informa√ß√µes do bot"""
        print("\\nü§ñ Teste 3: Informa√ß√µes do Bot")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "get-bot-info", {}
            )
            
            if result.get("success"):
                bot_info = result.get("result", {})
                print("‚úÖ Bot info obtida:")
                print(f"   Dispon√≠vel: {bot_info.get('service_available', False)}")
                
                if "bot_info" in bot_info:
                    info = bot_info["bot_info"]
                    print(f"   Nome: {info.get('first_name', 'N/A')}")
                    print(f"   Username: @{info.get('username', 'N/A')}")
            else:
                print(f"‚ùå Erro ao obter bot info: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de bot info: {e}")
    
    async def test_send_message(self):
        """Testa envio de mensagem"""
        print("\\nüì± Teste 4: Envio de Mensagem")
        print("-" * 40)
        
        # Verificar se Telegram est√° configurado
        telegram_config = self.config.get_section("telegram")
        if not telegram_config or not telegram_config.get("enabled"):
            print("‚ö†Ô∏è Telegram n√£o configurado - pulando teste")
            return
        
        try:
            test_message = """üß™ **Teste MCP Telegram Server**

‚úÖ Mensagem enviada via MCP Server
üöÄ XKit v3.0 - Hybrid MCP Architecture
üïí Teste executado automaticamente

*Este √© um teste de integra√ß√£o*"""
            
            result = await self.mcp_client.call_tool(
                self.server_name, "send-message", {
                    "message": test_message,
                    "format": "markdown"
                }
            )
            
            if result.get("success"):
                print("‚úÖ Mensagem enviada com sucesso!")
                print(f"   Timestamp: {result.get('result', {}).get('timestamp', 'N/A')}")
            else:
                print(f"‚ùå Erro ao enviar mensagem: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de mensagem: {e}")
    
    async def test_project_report(self):
        """Testa relat√≥rio de projeto"""
        print("\\nüìä Teste 5: Relat√≥rio de Projeto")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "send-project-report", {
                    "project_path": ".",
                    "include_ai": True,
                    "include_suggestions": True
                }
            )
            
            if result.get("success"):
                report_info = result.get("result", {})
                print("‚úÖ Relat√≥rio enviado!")
                print(f"   Projeto: {report_info.get('project_path', 'N/A')}")
                print(f"   Score: {report_info.get('score', 'N/A')}")
                print(f"   Tamanho: {report_info.get('report_length', 'N/A')} chars")
            else:
                print(f"‚ùå Erro no relat√≥rio: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de relat√≥rio: {e}")
    
    async def test_system_status(self):
        """Testa status do sistema"""
        print("\\nüîß Teste 6: Status do Sistema")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "send-system-status", {
                    "include_plugins": True,
                    "include_mcp": True
                }
            )
            
            if result.get("success"):
                print("‚úÖ Status do sistema enviado!")
                status_info = result.get("result", {})
                print(f"   Plugins inclu√≠dos: {status_info.get('include_plugins', False)}")
                print(f"   MCP inclu√≠do: {status_info.get('include_mcp', False)}")
            else:
                print(f"‚ùå Erro no status: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de status: {e}")
    
    async def test_git_status(self):
        """Testa status Git"""
        print("\\nüåø Teste 7: Status Git")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "send-git-status", {
                    "repo_path": ".",
                    "detailed": True
                }
            )
            
            if result.get("success"):
                print("‚úÖ Status Git enviado!")
                git_info = result.get("result", {})
                print(f"   Reposit√≥rio: {git_info.get('repo_path', 'N/A')}")
                print(f"   Detalhado: {git_info.get('detailed', False)}")
            else:
                print(f"‚ùå Erro no Git status: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste Git: {e}")
    
    async def test_telegram_command(self):
        """Testa processamento de comando"""
        print("\\nüì≤ Teste 8: Comando do Telegram")
        print("-" * 40)
        
        try:
            result = await self.mcp_client.call_tool(
                self.server_name, "handle-telegram-command", {
                    "command": "/status",
                    "args": [],
                    "user_id": "test_user",
                    "chat_id": "test_chat"
                }
            )
            
            if result.get("success"):
                print("‚úÖ Comando processado!")
                cmd_info = result.get("result", {})
                print(f"   Comando: {cmd_info.get('command', 'N/A')}")
                print(f"   Processado: {cmd_info.get('processed', False)}")
                print(f"   Resposta enviada: {cmd_info.get('response_sent', False)}")
            else:
                print(f"‚ùå Erro no comando: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de comando: {e}")
    
    def print_configuration_help(self):
        """Exibe ajuda de configura√ß√£o"""
        print("\\n" + "=" * 60)
        print("üìù Configura√ß√£o necess√°ria para testes completos:")
        print("=" * 60)
        print("\\n1. Configure o Telegram em ~/.xkit/config.json:")
        print('{')
        print('  "telegram": {')
        print('    "enabled": true,')
        print('    "token": "SEU_BOT_TOKEN",')
        print('    "admin_id": "SEU_CHAT_ID"')
        print('  }')
        print('}')
        print("\\n2. Obtenha o token do bot em @BotFather")
        print("3. Obtenha seu chat_id enviando /start para @userinfobot")
        print("\\nüí° Alguns testes podem falhar sem configura√ß√£o completa")


async def main():
    """Fun√ß√£o principal"""
    tester = TelegramMCPTester()
    
    # Exibe ajuda de configura√ß√£o
    tester.print_configuration_help()
    
    # Aguarda confirma√ß√£o do usu√°rio
    try:
        input("\\nüîÑ Pressione ENTER para continuar com os testes (Ctrl+C para sair)...")
    except KeyboardInterrupt:
        print("\\n‚ùå Testes cancelados pelo usu√°rio")
        return
    
    # Executa testes
    await tester.run_all_tests()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\\n‚ùå Testes interrompidos")
    except Exception as e:
        print(f"\\n‚ùå Erro cr√≠tico: {e}")