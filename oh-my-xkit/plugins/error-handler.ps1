# Oh My XKit - Error Handler Plugin
# Advanced error detection and resolution system

# Global error tracking
$global:XKIT_ERROR_COUNT = 0
$global:XKIT_LAST_ERROR = $null
$global:XKIT_ERROR_BRANCH = $null

# Error detection function
function global:Invoke-XKitErrorHandler {
    param(
        [string]$ErrorMessage,
        [string]$Command = "",
        [string]$Context = ""
    )
    
    $global:XKIT_ERROR_COUNT++
    $global:XKIT_LAST_ERROR = @{
        Message = $ErrorMessage
        Command = $Command
        Context = $Context
        Timestamp = Get-Date
        Count = $global:XKIT_ERROR_COUNT
    }
    
    Write-Host "`n[ERROR] " -NoNewline -ForegroundColor Red
    Write-Host "XKit Error Detected (#$global:XKIT_ERROR_COUNT)" -ForegroundColor Yellow
    Write-Host "───────────────────────────────────────" -ForegroundColor DarkGray
    Write-Host "Error: " -NoNewline -ForegroundColor Red
    Write-Host $ErrorMessage -ForegroundColor White
    
    if ($Command) {
        Write-Host "Command: " -NoNewline -ForegroundColor Yellow
        Write-Host $Command -ForegroundColor Cyan
    }
    
    if ($Context) {
        Write-Host "Context: " -NoNewline -ForegroundColor Magenta
        Write-Host $Context -ForegroundColor White
    }
    
    Write-Host "Time: " -NoNewline -ForegroundColor Green
    Write-Host $global:XKIT_LAST_ERROR.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") -ForegroundColor White
    Write-Host "───────────────────────────────────────" -ForegroundColor DarkGray
    
    # Prompt user for action
    $choice = Read-Host "`n[XPILOT] Want to stop and resolve with @xpilot? (y/N/s=skip/d=details)"
    
    switch ($choice.ToLower()) {
        "y" { 
            Invoke-XPilotResolution
        }
        "yes" { 
            Invoke-XPilotResolution
        }
        "d" { 
            Show-XKitErrorDetails
            Invoke-XKitErrorHandler $ErrorMessage $Command $Context
        }
        "details" { 
            Show-XKitErrorDetails
            Invoke-XKitErrorHandler $ErrorMessage $Command $Context
        }
        "s" { 
            Write-Host "[SKIP] Error skipped. Continuing..." -ForegroundColor Yellow
        }
        "skip" { 
            Write-Host "⏭️  Error skipped. Continuing..." -ForegroundColor Yellow
        }
        default { 
            Write-Host "❌ Error ignored. Use 'xerr' to review later." -ForegroundColor DarkYellow
        }
    }
}

# XPilot Resolution System
function global:Invoke-XPilotResolution {
    Write-Host "`n🔧 " -NoNewline -ForegroundColor Blue
    Write-Host "Initializing @xpilot resolution system..." -ForegroundColor Cyan
    
    # Create error branch
    $branchName = "xkit-error-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    $global:XKIT_ERROR_BRANCH = $branchName
    
    try {
        Write-Host "📁 Creating resolution branch: " -NoNewline -ForegroundColor Green
        Write-Host $branchName -ForegroundColor Yellow
        
        git checkout -b $branchName 2>$null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Branch created successfully" -ForegroundColor Green
            
            # Create error report
            $errorReport = @"
# XKit Error Report
**Error ID:** $($global:XKIT_ERROR_COUNT)
**Timestamp:** $($global:XKIT_LAST_ERROR.Timestamp)
**Branch:** $branchName

## Error Details
**Message:** $($global:XKIT_LAST_ERROR.Message)
**Command:** $($global:XKIT_LAST_ERROR.Command)
**Context:** $($global:XKIT_LAST_ERROR.Context)

## System Information
**PowerShell Version:** $($PSVersionTable.PSVersion)
**OS:** $($PSVersionTable.OS)
**Current Directory:** $(Get-Location)

## XKit State
**Framework Version:** 2.1.0
**Loaded Plugins:** $(Get-XKitLoadedPlugins -Join ', ')
**Error Count:** $global:XKIT_ERROR_COUNT

## Resolution Notes
- [ ] Error reproduced
- [ ] Root cause identified  
- [ ] Fix implemented
- [ ] Testing completed
- [ ] Documentation updated

---
*Generated by XKit Error Handler v2.1.0*
*@xpilot please analyze and provide resolution*
"@
            
            $errorFile = "XKIT_ERROR_$($global:XKIT_ERROR_COUNT).md"
            $errorReport | Out-File -FilePath $errorFile -Encoding UTF8
            
            Write-Host "📄 Error report created: " -NoNewline -ForegroundColor Blue
            Write-Host $errorFile -ForegroundColor Cyan
            
            # Stage and commit error report
            git add $errorFile
            git commit -m "🚨 XKit Error #$($global:XKIT_ERROR_COUNT): $($global:XKIT_LAST_ERROR.Message)"
            
            Write-Host "✅ Error report committed to branch" -ForegroundColor Green
            
            # Initialize XPilot agent
            Invoke-XPilotAgent
            
        } else {
            Write-Host "❌ Failed to create branch. Continuing with current branch." -ForegroundColor Red
            Invoke-XPilotAgent
        }
        
    } catch {
        Write-Host "❌ Git operation failed: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "🔄 Continuing with XPilot analysis..." -ForegroundColor Yellow
        Invoke-XPilotAgent
    }
}

# XPilot Local Agent
function global:Invoke-XPilotAgent {
    Write-Host "`n🤖 " -NoNewline -ForegroundColor Magenta
    Write-Host "@xpilot" -NoNewline -ForegroundColor White
    Write-Host " analysis starting..." -ForegroundColor Cyan
    Write-Host "───────────────────────────────────────" -ForegroundColor DarkGray
    
    # XPilot analysis logic
    $analysis = Get-XPilotAnalysis $global:XKIT_LAST_ERROR
    
    Write-Host "🔍 Analysis Results:" -ForegroundColor Blue
    Write-Host $analysis.Summary -ForegroundColor White
    
    if ($analysis.Suggestions.Count -gt 0) {
        Write-Host "`n💡 Suggested Actions:" -ForegroundColor Yellow
        $analysis.Suggestions | ForEach-Object { 
            Write-Host "  • $_" -ForegroundColor Cyan
        }
    }
    
    if ($analysis.AutoFix) {
        Write-Host "`n🔧 Auto-fix available!" -ForegroundColor Green
        $fix = Read-Host "Apply automatic fix? (y/N)"
        if ($fix.ToLower() -in @("y", "yes")) {
            & $analysis.AutoFixScript
        }
    }
    
    # Offer to return to main branch
    if ($global:XKIT_ERROR_BRANCH) {
        Write-Host "`n🔄 Resolution complete. Return to main branch? (y/N)" -NoNewline -ForegroundColor Yellow
        $return = Read-Host
        if ($return.ToLower() -in @("y", "yes")) {
            git checkout - 2>$null
            Write-Host "✅ Returned to previous branch" -ForegroundColor Green
        }
    }
}

# XPilot Analysis Engine
function Get-XPilotAnalysis {
    param($ErrorInfo)
    
    $analysis = @{
        Summary = ""
        Suggestions = @()
        AutoFix = $false
        AutoFixScript = $null
    }
    
    # Pattern matching for common errors
    switch -Regex ($ErrorInfo.Message) {
        ".*não é reconhecido como nome de cmdlet.*" {
            $analysis.Summary = "🔍 Command not found error detected. This typically indicates a missing function or module."
            $analysis.Suggestions += "Check if required plugins are loaded"
            $analysis.Suggestions += "Verify function definition and scope"
            $analysis.Suggestions += "Reload Oh My XKit framework"
            $analysis.AutoFix = $true
            $analysis.AutoFixScript = { Reload-OhMyXKit }
        }
        ".*syntax error.*|.*erro de sintaxe.*" {
            $analysis.Summary = "📝 PowerShell syntax error detected. Code structure needs correction."
            $analysis.Suggestions += "Review PowerShell syntax rules"
            $analysis.Suggestions += "Check bracket and quote matching"
            $analysis.Suggestions += "Validate variable declarations"
        }
        ".*access.*denied.*|.*acesso.*negado.*" {
            $analysis.Summary = "🔒 Access denied error. Permission or path issue detected."
            $analysis.Suggestions += "Run PowerShell as Administrator"
            $analysis.Suggestions += "Check file/folder permissions"
            $analysis.Suggestions += "Verify path accessibility"
        }
        ".*file.*not.*found.*|.*arquivo.*não.*encontrado.*" {
            $analysis.Summary = "📁 File not found error. Missing resource detected."
            $analysis.Suggestions += "Verify file path accuracy"
            $analysis.Suggestions += "Check if file exists"
            $analysis.Suggestions += "Review working directory"
        }
        default {
            $analysis.Summary = "🔍 General error detected. Requires manual analysis."
            $analysis.Suggestions += "Review error context and command"
            $analysis.Suggestions += "Check XKit documentation"
            $analysis.Suggestions += "Search for similar issues"
        }
    }
    
    return $analysis
}

# Utility functions
function global:Show-XKitErrorDetails {
    if ($global:XKIT_LAST_ERROR) {
        Write-Host "`n📊 " -NoNewline -ForegroundColor Blue
        Write-Host "Detailed Error Information" -ForegroundColor Cyan
        Write-Host "═══════════════════════════════════════" -ForegroundColor DarkGray
        
        $global:XKIT_LAST_ERROR.GetEnumerator() | ForEach-Object {
            Write-Host "$($_.Key):" -NoNewline -ForegroundColor Yellow
            Write-Host " $($_.Value)" -ForegroundColor White
        }
        
        Write-Host "`nGlobal State:" -ForegroundColor Magenta
        Write-Host "Total Errors: $global:XKIT_ERROR_COUNT" -ForegroundColor White
        Write-Host "Current Branch: $(git branch --show-current 2>$null)" -ForegroundColor White
        Write-Host "XKit Version: 2.1.0" -ForegroundColor White
    } else {
        Write-Host "ℹ️  No error information available" -ForegroundColor Yellow
    }
}

function global:Get-XKitLoadedPlugins {
    $pluginPath = "$PSScriptRoot\..\plugins"
    if (Test-Path $pluginPath) {
        Get-ChildItem $pluginPath -Filter "*.ps1" | ForEach-Object { $_.BaseName }
    } else {
        @("none")
    }
}

function global:Reload-OhMyXKit {
    Write-Host "🔄 Reloading Oh My XKit framework..." -ForegroundColor Yellow
    $OH_MY_XKIT_PATH = "$PSScriptRoot\..\oh-my-xkit.ps1"
    if (Test-Path $OH_MY_XKIT_PATH) {
        . $OH_MY_XKIT_PATH
        Write-Host "✅ Oh My XKit reloaded successfully" -ForegroundColor Green
    } else {
        Write-Host "❌ Oh My XKit not found at: $OH_MY_XKIT_PATH" -ForegroundColor Red
    }
}

# Shortcut commands
function global:xerr { Show-XKitErrorDetails }
function global:xfix { 
    if ($global:XKIT_LAST_ERROR) {
        Invoke-XKitErrorHandler $global:XKIT_LAST_ERROR.Message $global:XKIT_LAST_ERROR.Command $global:XKIT_LAST_ERROR.Context
    } else {
        Write-Host "ℹ️  No recent error to fix" -ForegroundColor Yellow
    }
}

# Hook into PowerShell error handling
# Note: This can be customized to trap specific types of errors
$global:ErrorActionPreference = "Continue"

Write-Host "[LOADED] XKit Error Handler loaded" -ForegroundColor Green